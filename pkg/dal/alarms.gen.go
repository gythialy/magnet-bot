// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/gythialy/magnet/pkg/model"
)

func newAlarm(db *gorm.DB, opts ...gen.DOOption) alarm {
	_alarm := alarm{}

	_alarm.alarmDo.UseDB(db, opts...)
	_alarm.alarmDo.UseModel(&model.Alarm{})

	tableName := _alarm.alarmDo.TableName()
	_alarm.ALL = field.NewAsterisk(tableName)
	_alarm.UserID = field.NewInt64(tableName, "user_id")
	_alarm.BusinessID = field.NewString(tableName, "business_id")
	_alarm.CreditName = field.NewString(tableName, "credit_name")
	_alarm.CreditCode = field.NewString(tableName, "credit_code")
	_alarm.StartDate = field.NewTime(tableName, "start_date")
	_alarm.EndDate = field.NewTime(tableName, "end_date")
	_alarm.DetailReason = field.NewString(tableName, "detail_reason")
	_alarm.HandleDepartment = field.NewString(tableName, "handle_department")
	_alarm.HandleUnit = field.NewString(tableName, "handle_unit")
	_alarm.HandleResult = field.NewString(tableName, "handle_result")
	_alarm.PageUrl1 = field.NewString(tableName, "page_url1")
	_alarm.NoticeID = field.NewString(tableName, "notice_id")
	_alarm.OriginNoticeID = field.NewString(tableName, "origin_notice_id")
	_alarm.PageUrl2 = field.NewString(tableName, "page_url2")
	_alarm.Title = field.NewString(tableName, "title")

	_alarm.fillFieldMap()

	return _alarm
}

type alarm struct {
	alarmDo

	ALL              field.Asterisk
	UserID           field.Int64
	BusinessID       field.String
	CreditName       field.String
	CreditCode       field.String
	StartDate        field.Time
	EndDate          field.Time
	DetailReason     field.String
	HandleDepartment field.String
	HandleUnit       field.String
	HandleResult     field.String
	PageUrl1         field.String
	NoticeID         field.String
	OriginNoticeID   field.String
	PageUrl2         field.String
	Title            field.String

	fieldMap map[string]field.Expr
}

func (a alarm) Table(newTableName string) *alarm {
	a.alarmDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a alarm) As(alias string) *alarm {
	a.alarmDo.DO = *(a.alarmDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *alarm) updateTableName(table string) *alarm {
	a.ALL = field.NewAsterisk(table)
	a.UserID = field.NewInt64(table, "user_id")
	a.BusinessID = field.NewString(table, "business_id")
	a.CreditName = field.NewString(table, "credit_name")
	a.CreditCode = field.NewString(table, "credit_code")
	a.StartDate = field.NewTime(table, "start_date")
	a.EndDate = field.NewTime(table, "end_date")
	a.DetailReason = field.NewString(table, "detail_reason")
	a.HandleDepartment = field.NewString(table, "handle_department")
	a.HandleUnit = field.NewString(table, "handle_unit")
	a.HandleResult = field.NewString(table, "handle_result")
	a.PageUrl1 = field.NewString(table, "page_url1")
	a.NoticeID = field.NewString(table, "notice_id")
	a.OriginNoticeID = field.NewString(table, "origin_notice_id")
	a.PageUrl2 = field.NewString(table, "page_url2")
	a.Title = field.NewString(table, "title")

	a.fillFieldMap()

	return a
}

func (a *alarm) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *alarm) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 15)
	a.fieldMap["user_id"] = a.UserID
	a.fieldMap["business_id"] = a.BusinessID
	a.fieldMap["credit_name"] = a.CreditName
	a.fieldMap["credit_code"] = a.CreditCode
	a.fieldMap["start_date"] = a.StartDate
	a.fieldMap["end_date"] = a.EndDate
	a.fieldMap["detail_reason"] = a.DetailReason
	a.fieldMap["handle_department"] = a.HandleDepartment
	a.fieldMap["handle_unit"] = a.HandleUnit
	a.fieldMap["handle_result"] = a.HandleResult
	a.fieldMap["page_url1"] = a.PageUrl1
	a.fieldMap["notice_id"] = a.NoticeID
	a.fieldMap["origin_notice_id"] = a.OriginNoticeID
	a.fieldMap["page_url2"] = a.PageUrl2
	a.fieldMap["title"] = a.Title
}

func (a alarm) clone(db *gorm.DB) alarm {
	a.alarmDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a alarm) replaceDB(db *gorm.DB) alarm {
	a.alarmDo.ReplaceDB(db)
	return a
}

type alarmDo struct{ gen.DO }

type IAlarmDo interface {
	gen.SubQuery
	Debug() IAlarmDo
	WithContext(ctx context.Context) IAlarmDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAlarmDo
	WriteDB() IAlarmDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAlarmDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAlarmDo
	Not(conds ...gen.Condition) IAlarmDo
	Or(conds ...gen.Condition) IAlarmDo
	Select(conds ...field.Expr) IAlarmDo
	Where(conds ...gen.Condition) IAlarmDo
	Order(conds ...field.Expr) IAlarmDo
	Distinct(cols ...field.Expr) IAlarmDo
	Omit(cols ...field.Expr) IAlarmDo
	Join(table schema.Tabler, on ...field.Expr) IAlarmDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAlarmDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAlarmDo
	Group(cols ...field.Expr) IAlarmDo
	Having(conds ...gen.Condition) IAlarmDo
	Limit(limit int) IAlarmDo
	Offset(offset int) IAlarmDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAlarmDo
	Unscoped() IAlarmDo
	Create(values ...*model.Alarm) error
	CreateInBatches(values []*model.Alarm, batchSize int) error
	Save(values ...*model.Alarm) error
	First() (*model.Alarm, error)
	Take() (*model.Alarm, error)
	Last() (*model.Alarm, error)
	Find() ([]*model.Alarm, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Alarm, err error)
	FindInBatches(result *[]*model.Alarm, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Alarm) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAlarmDo
	Assign(attrs ...field.AssignExpr) IAlarmDo
	Joins(fields ...field.RelationField) IAlarmDo
	Preload(fields ...field.RelationField) IAlarmDo
	FirstOrInit() (*model.Alarm, error)
	FirstOrCreate() (*model.Alarm, error)
	FindByPage(offset int, limit int) (result []*model.Alarm, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAlarmDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a alarmDo) Debug() IAlarmDo {
	return a.withDO(a.DO.Debug())
}

func (a alarmDo) WithContext(ctx context.Context) IAlarmDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a alarmDo) ReadDB() IAlarmDo {
	return a.Clauses(dbresolver.Read)
}

func (a alarmDo) WriteDB() IAlarmDo {
	return a.Clauses(dbresolver.Write)
}

func (a alarmDo) Session(config *gorm.Session) IAlarmDo {
	return a.withDO(a.DO.Session(config))
}

func (a alarmDo) Clauses(conds ...clause.Expression) IAlarmDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a alarmDo) Returning(value interface{}, columns ...string) IAlarmDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a alarmDo) Not(conds ...gen.Condition) IAlarmDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a alarmDo) Or(conds ...gen.Condition) IAlarmDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a alarmDo) Select(conds ...field.Expr) IAlarmDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a alarmDo) Where(conds ...gen.Condition) IAlarmDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a alarmDo) Order(conds ...field.Expr) IAlarmDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a alarmDo) Distinct(cols ...field.Expr) IAlarmDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a alarmDo) Omit(cols ...field.Expr) IAlarmDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a alarmDo) Join(table schema.Tabler, on ...field.Expr) IAlarmDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a alarmDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAlarmDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a alarmDo) RightJoin(table schema.Tabler, on ...field.Expr) IAlarmDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a alarmDo) Group(cols ...field.Expr) IAlarmDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a alarmDo) Having(conds ...gen.Condition) IAlarmDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a alarmDo) Limit(limit int) IAlarmDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a alarmDo) Offset(offset int) IAlarmDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a alarmDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAlarmDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a alarmDo) Unscoped() IAlarmDo {
	return a.withDO(a.DO.Unscoped())
}

func (a alarmDo) Create(values ...*model.Alarm) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a alarmDo) CreateInBatches(values []*model.Alarm, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a alarmDo) Save(values ...*model.Alarm) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a alarmDo) First() (*model.Alarm, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Alarm), nil
	}
}

func (a alarmDo) Take() (*model.Alarm, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Alarm), nil
	}
}

func (a alarmDo) Last() (*model.Alarm, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Alarm), nil
	}
}

func (a alarmDo) Find() ([]*model.Alarm, error) {
	result, err := a.DO.Find()
	return result.([]*model.Alarm), err
}

func (a alarmDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Alarm, err error) {
	buf := make([]*model.Alarm, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a alarmDo) FindInBatches(result *[]*model.Alarm, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a alarmDo) Attrs(attrs ...field.AssignExpr) IAlarmDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a alarmDo) Assign(attrs ...field.AssignExpr) IAlarmDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a alarmDo) Joins(fields ...field.RelationField) IAlarmDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a alarmDo) Preload(fields ...field.RelationField) IAlarmDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a alarmDo) FirstOrInit() (*model.Alarm, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Alarm), nil
	}
}

func (a alarmDo) FirstOrCreate() (*model.Alarm, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Alarm), nil
	}
}

func (a alarmDo) FindByPage(offset int, limit int) (result []*model.Alarm, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a alarmDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a alarmDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a alarmDo) Delete(models ...*model.Alarm) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *alarmDo) withDO(do gen.Dao) *alarmDo {
	a.DO = *do.(*gen.DO)
	return a
}
