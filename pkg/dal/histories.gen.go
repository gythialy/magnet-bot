// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/gythialy/magnet/pkg/model"
)

func newHistory(db *gorm.DB, opts ...gen.DOOption) history {
	_history := history{}

	_history.historyDo.UseDB(db, opts...)
	_history.historyDo.UseModel(&model.History{})

	tableName := _history.historyDo.TableName()
	_history.ALL = field.NewAsterisk(tableName)
	_history.UserID = field.NewInt64(tableName, "user_id")
	_history.URL = field.NewString(tableName, "url")
	_history.UpdatedAt = field.NewTime(tableName, "updated_at")
	_history.Title = field.NewString(tableName, "title")
	_history.HasTenderCode = field.NewInt32(tableName, "has_tender_code")

	_history.fillFieldMap()

	return _history
}

type history struct {
	historyDo

	ALL           field.Asterisk
	UserID        field.Int64
	URL           field.String
	UpdatedAt     field.Time
	Title         field.String
	HasTenderCode field.Int32

	fieldMap map[string]field.Expr
}

func (h history) Table(newTableName string) *history {
	h.historyDo.UseTable(newTableName)
	return h.updateTableName(newTableName)
}

func (h history) As(alias string) *history {
	h.historyDo.DO = *(h.historyDo.As(alias).(*gen.DO))
	return h.updateTableName(alias)
}

func (h *history) updateTableName(table string) *history {
	h.ALL = field.NewAsterisk(table)
	h.UserID = field.NewInt64(table, "user_id")
	h.URL = field.NewString(table, "url")
	h.UpdatedAt = field.NewTime(table, "updated_at")
	h.Title = field.NewString(table, "title")
	h.HasTenderCode = field.NewInt32(table, "has_tender_code")

	h.fillFieldMap()

	return h
}

func (h *history) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := h.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (h *history) fillFieldMap() {
	h.fieldMap = make(map[string]field.Expr, 5)
	h.fieldMap["user_id"] = h.UserID
	h.fieldMap["url"] = h.URL
	h.fieldMap["updated_at"] = h.UpdatedAt
	h.fieldMap["title"] = h.Title
	h.fieldMap["has_tender_code"] = h.HasTenderCode
}

func (h history) clone(db *gorm.DB) history {
	h.historyDo.ReplaceConnPool(db.Statement.ConnPool)
	return h
}

func (h history) replaceDB(db *gorm.DB) history {
	h.historyDo.ReplaceDB(db)
	return h
}

type historyDo struct{ gen.DO }

type IHistoryDo interface {
	gen.SubQuery
	Debug() IHistoryDo
	WithContext(ctx context.Context) IHistoryDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IHistoryDo
	WriteDB() IHistoryDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IHistoryDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IHistoryDo
	Not(conds ...gen.Condition) IHistoryDo
	Or(conds ...gen.Condition) IHistoryDo
	Select(conds ...field.Expr) IHistoryDo
	Where(conds ...gen.Condition) IHistoryDo
	Order(conds ...field.Expr) IHistoryDo
	Distinct(cols ...field.Expr) IHistoryDo
	Omit(cols ...field.Expr) IHistoryDo
	Join(table schema.Tabler, on ...field.Expr) IHistoryDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IHistoryDo
	RightJoin(table schema.Tabler, on ...field.Expr) IHistoryDo
	Group(cols ...field.Expr) IHistoryDo
	Having(conds ...gen.Condition) IHistoryDo
	Limit(limit int) IHistoryDo
	Offset(offset int) IHistoryDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IHistoryDo
	Unscoped() IHistoryDo
	Create(values ...*model.History) error
	CreateInBatches(values []*model.History, batchSize int) error
	Save(values ...*model.History) error
	First() (*model.History, error)
	Take() (*model.History, error)
	Last() (*model.History, error)
	Find() ([]*model.History, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.History, err error)
	FindInBatches(result *[]*model.History, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.History) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IHistoryDo
	Assign(attrs ...field.AssignExpr) IHistoryDo
	Joins(fields ...field.RelationField) IHistoryDo
	Preload(fields ...field.RelationField) IHistoryDo
	FirstOrInit() (*model.History, error)
	FirstOrCreate() (*model.History, error)
	FindByPage(offset int, limit int) (result []*model.History, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IHistoryDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (h historyDo) Debug() IHistoryDo {
	return h.withDO(h.DO.Debug())
}

func (h historyDo) WithContext(ctx context.Context) IHistoryDo {
	return h.withDO(h.DO.WithContext(ctx))
}

func (h historyDo) ReadDB() IHistoryDo {
	return h.Clauses(dbresolver.Read)
}

func (h historyDo) WriteDB() IHistoryDo {
	return h.Clauses(dbresolver.Write)
}

func (h historyDo) Session(config *gorm.Session) IHistoryDo {
	return h.withDO(h.DO.Session(config))
}

func (h historyDo) Clauses(conds ...clause.Expression) IHistoryDo {
	return h.withDO(h.DO.Clauses(conds...))
}

func (h historyDo) Returning(value interface{}, columns ...string) IHistoryDo {
	return h.withDO(h.DO.Returning(value, columns...))
}

func (h historyDo) Not(conds ...gen.Condition) IHistoryDo {
	return h.withDO(h.DO.Not(conds...))
}

func (h historyDo) Or(conds ...gen.Condition) IHistoryDo {
	return h.withDO(h.DO.Or(conds...))
}

func (h historyDo) Select(conds ...field.Expr) IHistoryDo {
	return h.withDO(h.DO.Select(conds...))
}

func (h historyDo) Where(conds ...gen.Condition) IHistoryDo {
	return h.withDO(h.DO.Where(conds...))
}

func (h historyDo) Order(conds ...field.Expr) IHistoryDo {
	return h.withDO(h.DO.Order(conds...))
}

func (h historyDo) Distinct(cols ...field.Expr) IHistoryDo {
	return h.withDO(h.DO.Distinct(cols...))
}

func (h historyDo) Omit(cols ...field.Expr) IHistoryDo {
	return h.withDO(h.DO.Omit(cols...))
}

func (h historyDo) Join(table schema.Tabler, on ...field.Expr) IHistoryDo {
	return h.withDO(h.DO.Join(table, on...))
}

func (h historyDo) LeftJoin(table schema.Tabler, on ...field.Expr) IHistoryDo {
	return h.withDO(h.DO.LeftJoin(table, on...))
}

func (h historyDo) RightJoin(table schema.Tabler, on ...field.Expr) IHistoryDo {
	return h.withDO(h.DO.RightJoin(table, on...))
}

func (h historyDo) Group(cols ...field.Expr) IHistoryDo {
	return h.withDO(h.DO.Group(cols...))
}

func (h historyDo) Having(conds ...gen.Condition) IHistoryDo {
	return h.withDO(h.DO.Having(conds...))
}

func (h historyDo) Limit(limit int) IHistoryDo {
	return h.withDO(h.DO.Limit(limit))
}

func (h historyDo) Offset(offset int) IHistoryDo {
	return h.withDO(h.DO.Offset(offset))
}

func (h historyDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IHistoryDo {
	return h.withDO(h.DO.Scopes(funcs...))
}

func (h historyDo) Unscoped() IHistoryDo {
	return h.withDO(h.DO.Unscoped())
}

func (h historyDo) Create(values ...*model.History) error {
	if len(values) == 0 {
		return nil
	}
	return h.DO.Create(values)
}

func (h historyDo) CreateInBatches(values []*model.History, batchSize int) error {
	return h.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (h historyDo) Save(values ...*model.History) error {
	if len(values) == 0 {
		return nil
	}
	return h.DO.Save(values)
}

func (h historyDo) First() (*model.History, error) {
	if result, err := h.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.History), nil
	}
}

func (h historyDo) Take() (*model.History, error) {
	if result, err := h.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.History), nil
	}
}

func (h historyDo) Last() (*model.History, error) {
	if result, err := h.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.History), nil
	}
}

func (h historyDo) Find() ([]*model.History, error) {
	result, err := h.DO.Find()
	return result.([]*model.History), err
}

func (h historyDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.History, err error) {
	buf := make([]*model.History, 0, batchSize)
	err = h.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (h historyDo) FindInBatches(result *[]*model.History, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return h.DO.FindInBatches(result, batchSize, fc)
}

func (h historyDo) Attrs(attrs ...field.AssignExpr) IHistoryDo {
	return h.withDO(h.DO.Attrs(attrs...))
}

func (h historyDo) Assign(attrs ...field.AssignExpr) IHistoryDo {
	return h.withDO(h.DO.Assign(attrs...))
}

func (h historyDo) Joins(fields ...field.RelationField) IHistoryDo {
	for _, _f := range fields {
		h = *h.withDO(h.DO.Joins(_f))
	}
	return &h
}

func (h historyDo) Preload(fields ...field.RelationField) IHistoryDo {
	for _, _f := range fields {
		h = *h.withDO(h.DO.Preload(_f))
	}
	return &h
}

func (h historyDo) FirstOrInit() (*model.History, error) {
	if result, err := h.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.History), nil
	}
}

func (h historyDo) FirstOrCreate() (*model.History, error) {
	if result, err := h.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.History), nil
	}
}

func (h historyDo) FindByPage(offset int, limit int) (result []*model.History, count int64, err error) {
	result, err = h.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = h.Offset(-1).Limit(-1).Count()
	return
}

func (h historyDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = h.Count()
	if err != nil {
		return
	}

	err = h.Offset(offset).Limit(limit).Scan(result)
	return
}

func (h historyDo) Scan(result interface{}) (err error) {
	return h.DO.Scan(result)
}

func (h historyDo) Delete(models ...*model.History) (result gen.ResultInfo, err error) {
	return h.DO.Delete(models)
}

func (h *historyDo) withDO(do gen.Dao) *historyDo {
	h.DO = *do.(*gen.DO)
	return h
}
