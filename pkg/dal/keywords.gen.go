// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/gythialy/magnet/pkg/model"
)

func newKeyword(db *gorm.DB, opts ...gen.DOOption) keyword {
	_keyword := keyword{}

	_keyword.keywordDo.UseDB(db, opts...)
	_keyword.keywordDo.UseModel(&model.Keyword{})

	tableName := _keyword.keywordDo.TableName()
	_keyword.ALL = field.NewAsterisk(tableName)
	_keyword.ID = field.NewInt32(tableName, "id")
	_keyword.CreatedAt = field.NewTime(tableName, "created_at")
	_keyword.UpdatedAt = field.NewTime(tableName, "updated_at")
	_keyword.DeletedAt = field.NewField(tableName, "deleted_at")
	_keyword.Keyword = field.NewString(tableName, "keyword")
	_keyword.UserID = field.NewInt64(tableName, "user_id")
	_keyword.Type = field.NewInt32(tableName, "type")
	_keyword.Counter = field.NewInt32(tableName, "counter")

	_keyword.fillFieldMap()

	return _keyword
}

type keyword struct {
	keywordDo

	ALL       field.Asterisk
	ID        field.Int32
	CreatedAt field.Time
	UpdatedAt field.Time
	DeletedAt field.Field
	Keyword   field.String
	UserID    field.Int64
	Type      field.Int32
	Counter   field.Int32

	fieldMap map[string]field.Expr
}

func (k keyword) Table(newTableName string) *keyword {
	k.keywordDo.UseTable(newTableName)
	return k.updateTableName(newTableName)
}

func (k keyword) As(alias string) *keyword {
	k.keywordDo.DO = *(k.keywordDo.As(alias).(*gen.DO))
	return k.updateTableName(alias)
}

func (k *keyword) updateTableName(table string) *keyword {
	k.ALL = field.NewAsterisk(table)
	k.ID = field.NewInt32(table, "id")
	k.CreatedAt = field.NewTime(table, "created_at")
	k.UpdatedAt = field.NewTime(table, "updated_at")
	k.DeletedAt = field.NewField(table, "deleted_at")
	k.Keyword = field.NewString(table, "keyword")
	k.UserID = field.NewInt64(table, "user_id")
	k.Type = field.NewInt32(table, "type")
	k.Counter = field.NewInt32(table, "counter")

	k.fillFieldMap()

	return k
}

func (k *keyword) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := k.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (k *keyword) fillFieldMap() {
	k.fieldMap = make(map[string]field.Expr, 8)
	k.fieldMap["id"] = k.ID
	k.fieldMap["created_at"] = k.CreatedAt
	k.fieldMap["updated_at"] = k.UpdatedAt
	k.fieldMap["deleted_at"] = k.DeletedAt
	k.fieldMap["keyword"] = k.Keyword
	k.fieldMap["user_id"] = k.UserID
	k.fieldMap["type"] = k.Type
	k.fieldMap["counter"] = k.Counter
}

func (k keyword) clone(db *gorm.DB) keyword {
	k.keywordDo.ReplaceConnPool(db.Statement.ConnPool)
	return k
}

func (k keyword) replaceDB(db *gorm.DB) keyword {
	k.keywordDo.ReplaceDB(db)
	return k
}

type keywordDo struct{ gen.DO }

type IKeywordDo interface {
	gen.SubQuery
	Debug() IKeywordDo
	WithContext(ctx context.Context) IKeywordDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IKeywordDo
	WriteDB() IKeywordDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IKeywordDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IKeywordDo
	Not(conds ...gen.Condition) IKeywordDo
	Or(conds ...gen.Condition) IKeywordDo
	Select(conds ...field.Expr) IKeywordDo
	Where(conds ...gen.Condition) IKeywordDo
	Order(conds ...field.Expr) IKeywordDo
	Distinct(cols ...field.Expr) IKeywordDo
	Omit(cols ...field.Expr) IKeywordDo
	Join(table schema.Tabler, on ...field.Expr) IKeywordDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IKeywordDo
	RightJoin(table schema.Tabler, on ...field.Expr) IKeywordDo
	Group(cols ...field.Expr) IKeywordDo
	Having(conds ...gen.Condition) IKeywordDo
	Limit(limit int) IKeywordDo
	Offset(offset int) IKeywordDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IKeywordDo
	Unscoped() IKeywordDo
	Create(values ...*model.Keyword) error
	CreateInBatches(values []*model.Keyword, batchSize int) error
	Save(values ...*model.Keyword) error
	First() (*model.Keyword, error)
	Take() (*model.Keyword, error)
	Last() (*model.Keyword, error)
	Find() ([]*model.Keyword, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Keyword, err error)
	FindInBatches(result *[]*model.Keyword, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Keyword) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IKeywordDo
	Assign(attrs ...field.AssignExpr) IKeywordDo
	Joins(fields ...field.RelationField) IKeywordDo
	Preload(fields ...field.RelationField) IKeywordDo
	FirstOrInit() (*model.Keyword, error)
	FirstOrCreate() (*model.Keyword, error)
	FindByPage(offset int, limit int) (result []*model.Keyword, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IKeywordDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (k keywordDo) Debug() IKeywordDo {
	return k.withDO(k.DO.Debug())
}

func (k keywordDo) WithContext(ctx context.Context) IKeywordDo {
	return k.withDO(k.DO.WithContext(ctx))
}

func (k keywordDo) ReadDB() IKeywordDo {
	return k.Clauses(dbresolver.Read)
}

func (k keywordDo) WriteDB() IKeywordDo {
	return k.Clauses(dbresolver.Write)
}

func (k keywordDo) Session(config *gorm.Session) IKeywordDo {
	return k.withDO(k.DO.Session(config))
}

func (k keywordDo) Clauses(conds ...clause.Expression) IKeywordDo {
	return k.withDO(k.DO.Clauses(conds...))
}

func (k keywordDo) Returning(value interface{}, columns ...string) IKeywordDo {
	return k.withDO(k.DO.Returning(value, columns...))
}

func (k keywordDo) Not(conds ...gen.Condition) IKeywordDo {
	return k.withDO(k.DO.Not(conds...))
}

func (k keywordDo) Or(conds ...gen.Condition) IKeywordDo {
	return k.withDO(k.DO.Or(conds...))
}

func (k keywordDo) Select(conds ...field.Expr) IKeywordDo {
	return k.withDO(k.DO.Select(conds...))
}

func (k keywordDo) Where(conds ...gen.Condition) IKeywordDo {
	return k.withDO(k.DO.Where(conds...))
}

func (k keywordDo) Order(conds ...field.Expr) IKeywordDo {
	return k.withDO(k.DO.Order(conds...))
}

func (k keywordDo) Distinct(cols ...field.Expr) IKeywordDo {
	return k.withDO(k.DO.Distinct(cols...))
}

func (k keywordDo) Omit(cols ...field.Expr) IKeywordDo {
	return k.withDO(k.DO.Omit(cols...))
}

func (k keywordDo) Join(table schema.Tabler, on ...field.Expr) IKeywordDo {
	return k.withDO(k.DO.Join(table, on...))
}

func (k keywordDo) LeftJoin(table schema.Tabler, on ...field.Expr) IKeywordDo {
	return k.withDO(k.DO.LeftJoin(table, on...))
}

func (k keywordDo) RightJoin(table schema.Tabler, on ...field.Expr) IKeywordDo {
	return k.withDO(k.DO.RightJoin(table, on...))
}

func (k keywordDo) Group(cols ...field.Expr) IKeywordDo {
	return k.withDO(k.DO.Group(cols...))
}

func (k keywordDo) Having(conds ...gen.Condition) IKeywordDo {
	return k.withDO(k.DO.Having(conds...))
}

func (k keywordDo) Limit(limit int) IKeywordDo {
	return k.withDO(k.DO.Limit(limit))
}

func (k keywordDo) Offset(offset int) IKeywordDo {
	return k.withDO(k.DO.Offset(offset))
}

func (k keywordDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IKeywordDo {
	return k.withDO(k.DO.Scopes(funcs...))
}

func (k keywordDo) Unscoped() IKeywordDo {
	return k.withDO(k.DO.Unscoped())
}

func (k keywordDo) Create(values ...*model.Keyword) error {
	if len(values) == 0 {
		return nil
	}
	return k.DO.Create(values)
}

func (k keywordDo) CreateInBatches(values []*model.Keyword, batchSize int) error {
	return k.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (k keywordDo) Save(values ...*model.Keyword) error {
	if len(values) == 0 {
		return nil
	}
	return k.DO.Save(values)
}

func (k keywordDo) First() (*model.Keyword, error) {
	if result, err := k.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Keyword), nil
	}
}

func (k keywordDo) Take() (*model.Keyword, error) {
	if result, err := k.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Keyword), nil
	}
}

func (k keywordDo) Last() (*model.Keyword, error) {
	if result, err := k.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Keyword), nil
	}
}

func (k keywordDo) Find() ([]*model.Keyword, error) {
	result, err := k.DO.Find()
	return result.([]*model.Keyword), err
}

func (k keywordDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Keyword, err error) {
	buf := make([]*model.Keyword, 0, batchSize)
	err = k.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (k keywordDo) FindInBatches(result *[]*model.Keyword, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return k.DO.FindInBatches(result, batchSize, fc)
}

func (k keywordDo) Attrs(attrs ...field.AssignExpr) IKeywordDo {
	return k.withDO(k.DO.Attrs(attrs...))
}

func (k keywordDo) Assign(attrs ...field.AssignExpr) IKeywordDo {
	return k.withDO(k.DO.Assign(attrs...))
}

func (k keywordDo) Joins(fields ...field.RelationField) IKeywordDo {
	for _, _f := range fields {
		k = *k.withDO(k.DO.Joins(_f))
	}
	return &k
}

func (k keywordDo) Preload(fields ...field.RelationField) IKeywordDo {
	for _, _f := range fields {
		k = *k.withDO(k.DO.Preload(_f))
	}
	return &k
}

func (k keywordDo) FirstOrInit() (*model.Keyword, error) {
	if result, err := k.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Keyword), nil
	}
}

func (k keywordDo) FirstOrCreate() (*model.Keyword, error) {
	if result, err := k.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Keyword), nil
	}
}

func (k keywordDo) FindByPage(offset int, limit int) (result []*model.Keyword, count int64, err error) {
	result, err = k.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = k.Offset(-1).Limit(-1).Count()
	return
}

func (k keywordDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = k.Count()
	if err != nil {
		return
	}

	err = k.Offset(offset).Limit(limit).Scan(result)
	return
}

func (k keywordDo) Scan(result interface{}) (err error) {
	return k.DO.Scan(result)
}

func (k keywordDo) Delete(models ...*model.Keyword) (result gen.ResultInfo, err error) {
	return k.DO.Delete(models)
}

func (k *keywordDo) withDO(do gen.Dao) *keywordDo {
	k.DO = *do.(*gen.DO)
	return k
}
